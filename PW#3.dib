#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №1. Знакомство с потоками.

**Цель:** Познакомиться с возможностями класса System.Thread платформы .NET Framework.

**Результаты:** После выполнения работы Вы сможете:
1. Запускать длительные операции в отдельном потоке.
2. Завершать поток.
3. Дожидаться завершения выполнения потока. 


**Материалы для самостоятельного изучения**.
1. [Основы управления потоками](https://learn.microsoft.com/en-us/dotnet/standard/threading/managed-threading-basics)
2. [Использование потоков](https://learn.microsoft.com/en-us/dotnet/standard/threading/using-threads-and-threading)
3. [Примитив синхронизации Барьер](https://learn.microsoft.com/ru-ru/dotnet/standard/threading/barrier)
4. [Interlocked операции](https://learn.microsoft.com/en-us/dotnet/api/system.threading.interlocked?view=net-8.0)

## Задание.
Реализовать вычисление определенного интеграла методом трапеции в несколько потоков.

Отрезок, на котором происходит вычисление, разбивается на отрезки по количеству потоков. Для каждого отрезка значение 
интеграла считается в отдельном потоке, после завершения вычисоения полученный рельтаты суммирутся.

**Указание**.
1. Для суммирования результатов удобно воспользоваться разделяемой переменной, к которой будут прибалятся результаты вычисления прямо в самом потоке. Для синхронизации операций сложения лучше всего восользоваться [Interlocked операцией](https://learn.microsoft.com/en-us/dotnet/api/system.threading.interlocked?view=net-8.0).
2. Основная функция долна дождаться завершения всех потоков, которые вычисляют значение на отрезках, прежде чем возвратить результат. Для этого удобнее всего использовать Примитив синхронизации Барьер](https://learn.microsoft.com/ru-ru/dotnet/standard/threading/barrier).

#!csharp

using System.Threading;
//
// Вычисление определенного интеграла
//
class DefiniteIntegral
{   

    //
    // a, b - границы отрезка, на котором происходит вычисление опредленного интеграла
    // function - функция, для которой вычисляется определнный интеграл
    // step - размер одного шага разбиения
    // threadsNumber - число потоков, которые используются для вычислений
    //

    static Barrier barrier;
    static double area = 0.0;

    public static double Solve(double a, double b, Func<double, double> function, double step, int threadsnumber)
    {   
        if (Math.Abs(step) < Math.Pow(10, -7))
        {
            throw new Exception("Step close to machine zero");
        }

        barrier = new Barrier(threadsnumber);
        List<Thread> listOfThreads = new List<Thread>();
        double lengthOneThread = Math.Abs(b - a) / (double)threadsnumber; 

        for(double i = 0; i < threadsnumber; i++)
        {
            double leftBorder = a + i * lengthOneThread;
            double rightBorder = leftBorder + lengthOneThread;

            Thread thread = new Thread(() => currentPartIntegralArea(leftBorder, rightBorder, function, step, ref area));
            listOfThreads.Add(thread);
        }

        foreach(Thread thread in listOfThreads)
        {
            thread.Start();
        }

        foreach(Thread thread in listOfThreads)
        {
            thread.Join();
        }

        return area;
    }

    public static void currentPartIntegralArea(double leftBorder, double rightBorder, Func<double, double> function, double step, ref double area)
    {   
        double threadArea = 0.0;
        int StepsInBetween = (int)(Math.Abs(rightBorder - leftBorder) / step);
        var x1 = leftBorder;
        var x2 = leftBorder + step;

        for(int j = 0; j < StepsInBetween; j++)
        {
            threadArea += ((function(x1) + function(x2)) / 2) * step;
            x1 += step;
            x2 += step;
        }

        if (x2 > rightBorder)
        {
            threadArea += ((function(x1) + function(x2) / 2) * (rightBorder - x1));
        }
        
        Interlocked.CompareExchange(ref area, area + threadArea, area);
        barrier.SignalAndWait();
    }
}

#!csharp

#r "nuget: xunit, 2.8.1"

using Xunit;

var X = (double x) => x;
var SIN = (double x) => Math.Sin(x);

Assert.Equal(0, DefiniteIntegral.Solve(-1, 1, X, 1e-4, 2), 1e-4);

Assert.Equal(0, DefiniteIntegral.Solve(-1, 1, SIN, 1e-5, 8), 1e-4);

Assert.Equal(50, DefiniteIntegral.Solve(0, 10, X, 1e-6, 8), 1e-5);
